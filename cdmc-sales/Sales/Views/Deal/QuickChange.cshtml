@model Entity.Deal
@{
    ViewBag.Title = "出单编辑";
}
@using Entity
@using Utl
@using BLL
<fieldset>
    <legend>@SR.Form</legend>
    <table id="quickTable" cellpadding="0" cellspacing="0" align="center" style=" width:100%;">
        <tr>
            <td style="width:85px;">
                @Html.LabelFor(model => model.DealCode)
            </td>
            <td>
                @Html.TextBox("DealCode", Model == null ? "出单后自动生成" : Model.DealCode, new { READONLY = "readonly" })
            </td>
            <td style="width:85px;">
                @Html.LabelFor(model => model.PackageID, "Package")
            </td>
            <td>
                @Html.DropDownListFor(m => m.PackageID, new SelectList(CH.GetAllData<Package>(), "ID", "Name"), "-请选择-", new { style = "width:300px;" })
                @Html.ValidationMessageFor(model => model.PackageID)
            </td>
        </tr>
        <tr>
            <td style="width:85px;">
                @Html.LabelFor(model => model.CompanyRelationshipID, "公司")
            </td>
            <td>
                @{
                    var CRM = CH.GetDataById<CompanyRelationship>((int)ViewBag.CompanyRelationshipID);
                }
                @Html.TextBox("CompanyRelationshipName", CRM.CompanyName, new { @readOnly = "true", style = "width:200px;border-style: none" })
                @Html.Hidden("CompanyRelationshipID", (int)ViewBag.CompanyRelationshipID)
            </td>
            <td style="width:85px;">
                @Html.LabelFor(model => model.ExpectedPaymentDate)
            </td>
            <td>
                @Html.Telerik().DatePickerFor(model => model.ExpectedPaymentDate)
                @Html.ValidationMessageFor(model => model.ExpectedPaymentDate)
            </td>
        </tr>
        <tr>
            <td style="width:85px;">
                @Html.LabelFor(model => model.SignDate)
            </td>
            <td>
                @Html.Telerik().DatePicker().Name("SignDate").Value(Model == null ? DateTime.Now : Model.SignDate)
                @Html.ValidationMessageFor(model => model.SignDate)
            </td>
            <td style="width:85px;">
                @Html.LabelFor(model => model.Payment)
            </td>
            <td>
                @Html.Telerik().CurrencyTextBoxFor(model => model.Payment)
                @Html.ValidationMessageFor(model => model.Payment)
            </td>
        </tr>
        <tr>
            <td style="width:85px;">
                @Html.LabelFor(model => model.Committer)
            </td>
            <td>
                @Html.EditorFor(model => model.Committer)<br />
                @Html.ValidationMessageFor(model => model.Committer)
            </td>
            <td style="width:85px;">
                @Html.LabelFor(model => model.CommitterContect)
            </td>
            <td>
                @Html.EditorFor(model => model.CommitterContect)
                @Html.ValidationMessageFor(model => model.CommitterContect)
            </td>
        </tr>
        <tr>
            <td style="width:85px;">
                @Html.LabelFor(model => model.CommitterEmail)
            </td>
            <td>
                @Html.EditorFor(model => model.CommitterEmail)
                @Html.ValidationMessageFor(model => model.CommitterEmail)
            </td>
            <td style="width:85px;">
                @Html.LabelFor(model => model.Sales)
            </td>
            <td>
                @{
                    var name = Model == null ? Employee.CurrentUserName : Model.Sales;
                    <input name ="Sales" value="@name" />
                }
                @Html.ValidationMessageFor(model => model.Sales)
            </td>
        </tr>
        <tr>
            <td style="width:85px;">
                @Html.LabelFor(model => model.PaymentDetail)
            </td>
            <td>
                @Html.TextAreaFor(model => model.PaymentDetail)
                @Html.ValidationMessageFor(model => model.PaymentDetail)
            </td>
            <td style="width:85px;">
                @Html.LabelFor(model => model.TicketDescription)
            </td>
            <td>
                @Html.TextAreaFor(model => model.TicketDescription)
                @Html.ValidationMessageFor(model => model.TicketDescription)
            </td>
        </tr>
        @*<tr>
            <td style="width:85px;">
                @Html.LabelFor(model => model.Abandoned, "是否坏账")
            </td>
            <td>
                @Html.EditorFor(m => m.Abandoned)
                @Html.ValidationMessageFor(model => model.Abandoned)
            </td>
            <td style="width:85px;">
                @Html.LabelFor(model => model.AbandonReason, "坏账原因")
            </td>
            <td>
                @Html.TextAreaFor(m => m.AbandonReason, new { style = "height: 10px;" })
                @Html.ValidationMessageFor(model => model.AbandonReason)
                @Html.HiddenFor(m => m.IsConfirm)
                @Html.Hidden("ProjectID", (int)ViewBag.ProjectID)
            </td>
        </tr>*@
    </table>
    @(Html.Telerik().Grid<AjaxParticipant>().Name("pList").BindTo(ViewData["pList"] as IEnumerable<AjaxParticipant>)
            .DataKeys(keys =>
            {
                keys.Add(s => s.ID);
            })
            .ToolBar(commands =>
            {
                commands.Insert();
                commands.SubmitChanges();
            })
            .Columns(c =>
            {
                c.Bound(p => p.Name).Title("客户名称").Width(100);
                c.Bound(p => p.Title).Title("客户职位").Width(100);
                c.Bound(p => p.Gender).Title("客户性别").Width(100);
                c.Bound(p => p.Mobile).Title("移动电话").Width(100);
                c.Bound(p => p.Contact).Title("客户直线").Width(100);
                c.Bound(p => p.Email).Title("电子邮箱").Width(120);
                c.Bound(p => p.ParticipantTypeName).Title("参会类型").Width(100);
                c.Command(commands => commands.Delete()).Title("删除").Width(100);
            })
            .DataBinding(dataBinding =>
            {
                dataBinding.Ajax()
                    .Select("_SelectAjaxParticipant", "SalesEx")
                    .Update("_UpdateAjaxParticipant", "SalesEx");
            })
            .Editable(editing => editing.Mode(GridEditMode.InCell).DefaultDataItem(new AjaxParticipant { }))
            .Scrollable(scrolling => scrolling.Height(160))
    ) 

</fieldset>

<style>
    #quickTable
    {
        border:none;
     }
    #quickTable tr td
    {
        width: 300px;
        border:none;
    }
    #quickTable tr td label
    {
        display: inline-block;
        width: 85px;
        padding-right: 5px;
    }
    #quickTable tr td input[type=text] .text-box, table tr td select
    {
        width: 140px;
    }
    #quickTable tr td textarea
    {
        height: 100px;
    }
    #categoriesError
    {
        display: none;
    }
    fieldset.fieldError span
    {
        display: inline-block !important;
        color: Red;
    }
</style>
