@model Entity.Deal
@{
    ViewBag.Title = "出单编辑";
}
@using Entity
@using Utl
@using BLL
<script>
    function onSave(e) {
        var haserror = false;
        if ($("#HideDistrictNumberID").val() == '0') {
            if ($("#ZIP").val() == '') {
                alert('请输入国内邮编');
                haserror = true;
            } else if ($("#Address").val() == '') {
                alert('请输入国内地址');
                haserror = true;
            }
        }
        if (haserror)
        { e.preventDefault(); }
        //        if ($(".t-button.t-grid-update").attr("disabled") == "disabled") {
        //            e.preventDefault();
        //        }
        //        $(".t-button.t-grid-update").attr("disabled", "disabled");
    }
</script>
<fieldset>
    <legend>请填入出单信息</legend>
    <table id="quickTable" cellpadding="0" cellspacing="0" align="center" style="width: 100%;">
        <tr>
            <td style="width: 85px;">
                @Html.LabelFor(model => model.DealCode)
            </td>
            <td>
                @Html.TextBox("DealCode", Model == null ? "出单后自动生成" : Model.DealCode, new { READONLY = "readonly" })
            </td>
            <td style="width: 85px;">
                @Html.LabelFor(model => model.PackageID, "Package")
            </td>
            <td>
                @Html.DropDownListFor(m => m.PackageID, new SelectList(CH.GetAllData<Package>().OrderBy(s => s.Name), "ID", "Name"), "-请选择-", new { style = "width:300px;" })
                @Html.ValidationMessageFor(model => model.PackageID)
            </td>
        </tr>
        <tr>
            <td style="width: 85px;">
               
            </td>
            <td>
                
            </td>
            <td style="width: 85px;">
                @Html.LabelFor(model => model.DealType)
            </td>
            <td>
                @Html.DropDownListFor(m => m.DealType, SelectHelper.DealTypeSelectList(), "-请选择-", new { style = "width:300px;" })
                @Html.ValidationMessageFor(model => model.DealType)
            </td>
        </tr>
        <tr>
            <td style="width: 85px;">
            </td>
            <td>
            </td>
            <td style="width: 85px;">
                <div id="Polldivlabel" style="display: none">@Html.LabelFor(model => model.Poll)</div>
            </td>
            <td>
                <div id="Polldiv" style="display: none">
                    @Html.TextBoxFor(model => model.Poll)</div>
                @Html.ValidationMessageFor(model => model.Poll)
            </td>
        </tr>
        <tr>
            <td style="width: 85px;">
                @Html.LabelFor(model => model.CompanyRelationshipID, "公司")
            </td>
            <td>
                @{
                    var CRM = CH.GetDataById<CompanyRelationship>((int)ViewBag.CompanyRelationshipID);
                }
                @Html.TextBox("CompanyRelationshipName", CRM.CompanyName, new { @readOnly = "true", style = "width:200px;border-style: none" })
                @Html.Hidden("CompanyRelationshipID", (int)ViewBag.CompanyRelationshipID)
            </td>
            <td style="width: 85px;">
                @Html.LabelFor(model => model.ExpectedPaymentDate)

            </td>
            <td>
                @Html.Telerik().DatePickerFor(model => model.ExpectedPaymentDate)
                @Html.ValidationMessageFor(model => model.ExpectedPaymentDate)
            </td>
        </tr>
        <tr>
            <td style="width: 85px;">
                @Html.LabelFor(model => model.SignDate)
            </td>
            <td>
                @Html.Telerik().DatePicker().Name("SignDate").Value(Model == null ? DateTime.Now : Model.SignDate)
                @Html.ValidationMessageFor(model => model.SignDate)
            </td>
            <td style="width: 85px;">
                @Html.LabelFor(model => model.Payment)
            </td>
            <td>
                @Html.Telerik().NumericTextBoxFor(model => model.Payment)
                @Html.ValidationMessageFor(model => model.Payment)
                @foreach (var p in CH.GetAllData<CurrencyType>())
                {
                    @Html.RadioButton("currencytyperb", p.ID, p.Name == "RMB" ? true : false, new { onchange = "setcurrencytypeid(" + p.ID + ")" })
                    @p.Name
                }
                @Html.TextBoxFor(model => model.CurrencyTypeID, new { @style = "display:none" })
            </td>
        </tr>
        <tr>
            <td style="width: 85px;">
                @Html.LabelFor(model => model.Committer)
            </td>
            <td>
                @Html.EditorFor(model => model.Committer)<br />
                @Html.ValidationMessageFor(model => model.Committer)
            </td>
            <td style="width: 85px;">
                @Html.LabelFor(model => model.CommitterContect)
            </td>
            <td>
                @Html.EditorFor(model => model.CommitterContect)
                @Html.ValidationMessageFor(model => model.CommitterContect)
            </td>
        </tr>
        <tr>
            <td style="width: 85px;">
                @Html.LabelFor(model => model.CommitterEmail)
            </td>
            <td>
                @Html.EditorFor(model => model.CommitterEmail)
                @Html.ValidationMessageFor(model => model.CommitterEmail)
            </td>
            <td style="width: 85px;">
                @Html.LabelFor(model => model.Sales)
            </td>
            <td>
                @{
                    var name = Model == null ? Employee.CurrentUserName : Model.Sales;
                    <input name ="Sales" value="@name" />
                }
                @Html.ValidationMessageFor(model => model.Sales)
            </td>
        </tr>
        <tr>
            <td style="width: 85px;">
                @Html.LabelFor(model => model.PaymentDetail)
            </td>
            <td>
                @Html.TextAreaFor(model => model.PaymentDetail)
                @Html.ValidationMessageFor(model => model.PaymentDetail)
            </td>
            <td style="width: 85px;">
                @Html.LabelFor(model => model.TicketDescription)
            </td>
            <td>
                @Html.TextAreaFor(model => model.TicketDescription)
                @Html.ValidationMessageFor(model => model.TicketDescription)
            </td>
        </tr>
        @* @{
            if (CRM != null)
            {
                var CRMCompany = CH.GetDataById<Company>(CRM.CompanyID);
                if ((CRMCompany != null) && (CRMCompany.DistrictNumberID == null))
                {
                <tr>
                    <td style="width: 85px;">公司地址</td>
                    <td>
                        @Html.TextBox("Address_CH", CRMCompany.Address, new { style = "width:360px;" })
                    </td>
                    <td style="width: 85px;">英文地址</td>
                    <td>
                        @Html.TextBox("Address_EN", CRMCompany.Address_EN, new { style = "width:360px;" })
                    </td>
                </tr>
                }
            }
        }*@
    </table>
    <fieldset style="margin: 5px 0px 0px 0px;">
        <legend>请填入参会人信息</legend>
        @(Html.Telerik().Grid<AjaxParticipant>().Name("pList").BindTo(ViewData["pList"] as IEnumerable<AjaxParticipant>)
            .DataKeys(keys =>
            {
                keys.Add(s => s.ID);
            })
            .ToolBar(commands =>
            {
                commands.Insert();
            })
            @*.ToolBar(toolbar  =>
            {
                toolbar.Template(
                    @<text>
                        <a href="#" class="t-grid-action t-button t-state-default t-grid-add">Add new record</a>

                    </text>
                    );
            })*@
            .Columns(c =>
            {
                c.Bound(p => p.Name).Title("客户名称").Width(80);
                c.Bound(p => p.Title).Title("客户职位").Width(80);
                c.Bound(p => p.Gender).Title("客户性别").Width(70);
                c.Bound(p => p.Mobile).Title("移动电话").Width(80);
                c.Bound(p => p.Contact).Title("客户直线").Width(80);
                c.Bound(p => p.Email).Title("电子邮箱").Width(80);
                c.Bound(p => p.ZIP).Title("国内邮编").Width(70);
                c.Bound(p => p.Address).Title("国内地址");
                c.Bound(p => p.ParticipantTypeName).Title("参会类型").Width(160);

                c.Command(commands => commands.Delete()).Title("删除").Width(80);
            })
            .DataBinding(dataBinding =>
            {
                dataBinding.Ajax()
                    .Select("_SelectAjaxParticipant", "SalesEx")
                    .Insert("_InsertAjaxParticipant", "SalesEx")
                    .Delete("_DeleteAjaxParticipant", "SalesEx");
            })
            .ClientEvents(events => events.OnSave("onSave"))
            .Editable(editing => editing.Mode(GridEditMode.PopUp).DefaultDataItem(new AjaxParticipant { }))
            .Scrollable(scrolling => scrolling.Height(90))
            .ClientEvents(events => events.OnEdit("PopupLocation"))
        )
    </fieldset>
</fieldset>
<style>
    #quickTable
    {
        border: none;
    }
    #quickTable tr td
    {
        width: 300px;
        border: none;
    }
    #quickTable tr td label
    {
        display: inline-block;
        width: 85px;
        padding-right: 5px;
    }
    #quickTable tr td input[type=text] .text-box, table tr td select
    {
        width: 140px;
    }
    #quickTable tr td textarea
    {
        height: 100px;
    }
    #categoriesError
    {
        display: none;
    }
    fieldset.fieldError span
    {
        display: inline-block !important;
        color: Red;
    }
</style>
<script type="text/javascript">
    //页面加载后设置币种的默认值
    $("#CurrencyTypeID").val($("#currencytyperb").val());
    $(function () {
        $("#PackageID").change(function () {
            var packageid = $("#PackageID").find("option:selected").val();
            if (packageid == "") {
                $("#Polldiv").hide();
                $("#Polldivlabel").hide();
                $("#Poll").val("0");
                return;
            }
            $.ajax({
                url: "/Package/GetParticipantTypeName",
                type: "post",
                dataType: "json",
                data: { id: packageid },
                error: function (a, b, c) {
                    alert("获取参会类型失败，请重试。");
                },
                success: function (result) {
                    if (result.indexOf("Delegate") >= 0) {
                        $("#Polldiv").show();
                        $("#Polldivlabel").show();
                        $("#Poll").attr("value", ''); //填充内容
                    }
                    else {
                        $("#Polldiv").hide();
                        $("#Polldivlabel").hide();
                        $("#Poll").val("0");
                    }
                }
            });
        });

        $("#PaymentDetail").change(function () {
            if ($("#PaymentDetail").val() != '')
                $("#PaymentDetail").removeClass('fieldError');
        });
    });
    //点击radiobutton后给CurrencyTypeID赋值
    function setcurrencytypeid(currencytypeid) {
        $("#CurrencyTypeID").val(currencytypeid);
    }

    function PopupLocation(e) {


        $(e.form)
                .closest(".t-window")
                .data("tWindow")
                .center();
    }
   
</script>
