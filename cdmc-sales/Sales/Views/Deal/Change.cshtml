@model Entity.Deal
@{
    ViewBag.Title = "出单编辑";
}
@using Entity
@using Utl
@using BLL
<fieldset>
    <legend>@SR.Form</legend>
    <div class="display-field">
        @Html.LabelFor(model => model.DealCode)
    </div>
    <div class="display-field">
        @Html.TextBox("DealCode", Model == null ? "出单后自动生成" : Model.DealCode, new { READONLY = "readonly" })
    </div>
    <div class="editor-label">
        @Html.LabelFor(model => model.PackageID, "Package")
    </div>
    <div class="editor-field">
        @Html.DropDownListFor(m => m.PackageID, new SelectList(CH.GetAllData<Package>(), "ID", "Name"), "-请选择-")
        @Html.ValidationMessageFor(model => model.PackageID)
    </div>
    <div id="Polldivlabel" class="editor-label" style="display:none">
        @Html.LabelFor(model => model.Poll)
    </div>
    <div id="Polldiv" class="editor-field" style="display:none"> 
        @Html.TextBoxFor(model => model.Poll)
        @Html.ValidationMessageFor(model => model.Poll)
    </div>
    
    <div class="editor-label">
        @Html.LabelFor(model => model.CompanyRelationshipID, "公司")
    </div>
    <div class="editor-field">
        @{
            //var data = ViewBag.AvaibleCRM==null? CH.GetAllData<CompanyRelationship>():ViewBag.AvaibleCRM as List<CompanyRelationship>;
            IQueryable<CompanyRelationship> data = null;
            var lvl = Employee.CurrentRole.Level;
            int? projectid = Model == null ? ViewBag.ProjectID as int? : Model.ProjectID;
            //var project = CH.GetDataById<Project>(projectid);
            if (lvl <= 100 && lvl >= 10)
            {
                data = CRM_Logical.GetUserCallingCRM(projectid);

            }
           
            @Html.DropDownListFor(m => m.CompanyRelationshipID, new SelectList(data.OrderBy(o => o.Company.Name_EN), "ID", "CompanyName"), "-请选择-")
            @Html.ValidationMessageFor(model => model.CompanyRelationshipID)
        }
    </div>
    <div class="editor-label">
        @Html.LabelFor(model => model.ExpectedPaymentDate)
    </div>
    <div class="editor-field">
        @Html.Telerik().DatePickerFor(model => model.ExpectedPaymentDate)
        @Html.ValidationMessageFor(model => model.ExpectedPaymentDate)
    </div>
    <div class="editor-label">
        @Html.LabelFor(model => model.SignDate)
    </div>
    <div class="editor-field">
        @Html.Telerik().DatePicker().Name("SignDate").Value(Model == null ? DateTime.Now : Model.SignDate)
        @Html.ValidationMessageFor(model => model.SignDate)
    </div>
    <div class="editor-label">
        @Html.LabelFor(model => model.Payment)
    </div>
    <div class="editor-field">
        @Html.Telerik().NumericTextBoxFor(model => model.Payment).DecimalDigits(0)
        @if (Model == null)
        {
            foreach (var p in CH.GetAllData<CurrencyType>())
            {
                @Html.RadioButton("currencytyperb", p.ID, p.Name == "RMB" ? true : false, new { onchange = "setcurrencytypeid(" + p.ID + ")" })
               if (p.Name == "RMB")
               {
                        @Html.TextBox("currencytypeDefault", p.ID, new { @style = "display:none" })
               }
               @p.Name
            }
        }
        else
        {
            foreach (var p in CH.GetAllData<CurrencyType>())
            {
                if (Model.CurrencyTypeID == null)
                {
                    @Html.RadioButton("currencytyperb", p.Name == "RMB" ? true : false, new { onchange = "setcurrencytypeid(" + p.ID + ")" })
                }
                else
                {
                    if(Model.CurrencyTypeID==p.ID)
                    {
                        @Html.RadioButton("currencytyperb", true , new { onchange = "setcurrencytypeid(" + p.ID + ")",@checked=true })
                    }
                    else
                    {
                        @Html.RadioButton("currencytyperb",false, new { onchange = "setcurrencytypeid(" + p.ID + ")" })
                    }
                    
                }
                @p.Name
            }
            @Html.TextBox("currencytypeDefault", Model.CurrencyTypeID, new { @style = "display:none" })
        }
        
        @Html.TextBoxFor(model => model.CurrencyTypeID, new { @style = "display:none" })
        @Html.ValidationMessageFor(model => model.Payment)
        @Html.ValidationMessageFor(model => model.CurrencyTypeID)
    </div>
    @*<div class="editor-label">
        @Html.LabelFor(model => model.IsClosed)
    </div>
    <div class="editor-field">
        @Html.EditorFor(model => model.IsClosed)
        @Html.ValidationMessageFor(model => model.IsClosed)
    </div>*@
    <div class="editor-label">
        @Html.LabelFor(model => model.Committer)
    </div>
    <div class="editor-field">
        @Html.EditorFor(model => model.Committer)
        @Html.ValidationMessageFor(model => model.Committer)
    </div>
    <div class="editor-label">
        @Html.LabelFor(model => model.CommitterContect)
    </div>
    <div class="editor-field">
        @Html.EditorFor(model => model.CommitterContect)
        @Html.ValidationMessageFor(model => model.CommitterContect)
    </div>
    <div class="editor-label">
        @Html.LabelFor(model => model.CommitterEmail)
    </div>
    <div class="editor-field">
        @Html.EditorFor(model => model.CommitterEmail)
        @Html.ValidationMessageFor(model => model.CommitterEmail)
    </div>
  @*  <div class="editor-label">
        @Html.LabelFor(model => model.ActualPaymentDate)
    </div>
    <div class="editor-field">
        @Html.Telerik().DatePickerFor(model => model.ActualPaymentDate)
        @Html.ValidationMessageFor(model => model.ActualPaymentDate)
    </div>*@
    @*<div class="editor-label">
        @Html.LabelFor(model => model.Income)
    </div>
    <div class="editor-field">
        @Html.Telerik().CurrencyTextBoxFor(model => model.Income)
        @Html.ValidationMessageFor(model => model.Income)
    </div>*@
    <div class="editor-label">
        @Html.LabelFor(model => model.Sales)
    </div>
    <div class="editor-field">
        @{
            var name = Model == null ? Employee.CurrentUserName : Model.Sales;
            <input  name ="Sales" value="@name" />
        }
        @Html.ValidationMessageFor(model => model.Sales)
    </div>
    <div class="editor-label">
        @Html.LabelFor(model => model.PaymentDetail)
    </div>
    <div class="editor-field">
        @Html.TextAreaFor(model => model.PaymentDetail)
        @Html.ValidationMessageFor(model => model.PaymentDetail)
    </div>
    <div class="editor-label">
        @Html.LabelFor(model => model.TicketDescription)
    </div>
    <div class="editor-field">
        @Html.TextAreaFor(model => model.TicketDescription)
        @Html.ValidationMessageFor(model => model.TicketDescription)
    </div>
   @* <div class="editor-label">
        @Html.LabelFor(model => model.Abandoned, "是否坏账")
    </div>
    <div class="editor-field">
        @Html.EditorFor(m => m.Abandoned)
        @Html.ValidationMessageFor(model => model.Abandoned)
    </div>
    <div class="editor-label">
        @Html.LabelFor(model => model.AbandonReason, "坏账原因")
    </div>
    <div class="editor-field">
        @Html.TextAreaFor(m => m.AbandonReason)
        @Html.ValidationMessageFor(model => model.AbandonReason)
    </div>*@
    <div class="editor-field">
        @Html.HiddenFor(m => m.IsConfirm)
    </div>
    @Html.Hidden("ProjectID", (int)ViewBag.ProjectID)
</fieldset>
@{
    if (Model != null)
    {
        Html.Partial("Participants", Model.Participants == null ? new List<Participant>() : Model.Participants);
    }
}
<script type="text/javascript">
    //页面加载后设置币种的默认值
    $("#CurrencyTypeID").val($("#currencytypeDefault").val());
    setpollcount();
    $(function () {
        $("#PackageID").change(function () {
            setpollcount();
        });
    });
    //点击radiobutton后给CurrencyTypeID赋值
    function setcurrencytypeid(currencytypeid) {
        $("#CurrencyTypeID").val(currencytypeid);
    }
    function setpollcount() {
        var packageid = $("#PackageID").find("option:selected").val();
        if (packageid == "") {
            $("#Polldiv").hide();
            $("#Polldivlabel").hide();
            $("#Poll").val("0");
            return;
        }
        $.ajax({
            url: "/Package/GetParticipantTypeName",
            type: "post",
            dataType: "json",
            data: { id: packageid },
            error: function (a, b, c) {
                alert("获取参会类型失败，请重试。");
            },
            success: function (result) {
                if (result == "Delegate") {
                    $("#Polldiv").show();
                    $("#Polldivlabel").show();
                    if($("#Poll").val()=="")
                    $("#Poll").attr("value", ''); //填充内容
                }
                else {
                    $("#Polldiv").hide();
                    $("#Polldivlabel").hide();
                    $("#Poll").val("0");
                }
            }
        });
    }
</script>