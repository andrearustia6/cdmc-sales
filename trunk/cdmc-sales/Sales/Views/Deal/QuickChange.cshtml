@model Entity.Deal
@{
    ViewBag.Title = "出单编辑";
}
@using Entity
@using Utl
@using BLL
<fieldset>
    <legend>@SR.Form</legend>
    <table>
        <tr>
            <td>
                <div class="display-field">
                    @Html.LabelFor(model => model.DealCode)
                </div>
            </td>
            <td>
                <div class="display-field">
                    @Html.TextBox("DealCode", Model == null ? "出单后自动生成" : Model.DealCode, new { READONLY = "readonly" })
                </div>
            </td>
            <td>
                <div class="editor-label">
                    @Html.LabelFor(model => model.PackageID, "Package")
                </div>
            </td>
            <td>
                <div class="editor-field">
                    @Html.DropDownListFor(m => m.PackageID, new SelectList(CH.GetAllData<Package>(), "ID", "Name"), "-请选择-", new { style = "width:300px;" })
                    @Html.ValidationMessageFor(model => model.PackageID)
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div class="editor-label">
                    @Html.LabelFor(model => model.CompanyRelationshipID, "公司")
                </div>
            </td>
            <td>
                 <div class="editor-field">
                    @{
                        var CRM = CH.GetDataById<CompanyRelationship>((int)ViewBag.CompanyRelationshipID);
                    }
                    @Html.TextBox("CompanyRelationshipName", CRM.CompanyName, new { @readOnly = "true", style = "width:300px;border-style: none" })
                    @Html.Hidden("CompanyRelationshipID", (int)ViewBag.CompanyRelationshipID)
                </div>
            </td>
            <td>
                <div class="editor-label">
                    @Html.LabelFor(model => model.ExpectedPaymentDate)
                </div>
            </td>
            <td>
                <div class="editor-field">
                    @Html.Telerik().DatePickerFor(model => model.ExpectedPaymentDate)
                    @Html.ValidationMessageFor(model => model.ExpectedPaymentDate)
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div class="editor-label">
                    @Html.LabelFor(model => model.SignDate)
                </div>
            </td>
            <td>
                <div class="editor-field">
                    @Html.Telerik().DatePicker().Name("SignDate").Value(Model == null ? DateTime.Now : Model.SignDate)
                    @Html.ValidationMessageFor(model => model.SignDate)
                </div>
            </td>
            <td>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Payment)
                </div>
            </td>
            <td>
                <div class="editor-field">
                    @Html.Telerik().CurrencyTextBoxFor(model => model.Payment)
                    @Html.ValidationMessageFor(model => model.Payment)
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Committer)
                </div>
            </td>
            <td>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Committer)<br />
                    @Html.ValidationMessageFor(model => model.Committer)
                </div>
            </td>
            <td>
                <div class="editor-label">
                    @Html.LabelFor(model => model.CommitterContect)
                </div>
            </td>
            <td>
                <div class="editor-field">
                    @Html.EditorFor(model => model.CommitterContect)
                    @Html.ValidationMessageFor(model => model.CommitterContect)
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div class="editor-label">
                    @Html.LabelFor(model => model.CommitterEmail)
                </div>
            </td>
            <td>
                <div class="editor-field">
                    @Html.EditorFor(model => model.CommitterEmail)
                    @Html.ValidationMessageFor(model => model.CommitterEmail)
                </div>
            </td>
            <td>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Sales)
                </div>            
            </td>
            <td>
                <div class="editor-field">
                    @{
                        var name = Model == null ? Employee.CurrentUserName : Model.Sales;
                        <input name ="Sales" value="@name" />
                    }
                    @Html.ValidationMessageFor(model => model.Sales)
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div class="editor-label">
                    @Html.LabelFor(model => model.PaymentDetail)
                </div>
            </td>
            <td>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.PaymentDetail)
                    @Html.ValidationMessageFor(model => model.PaymentDetail)
                </div>            
            </td>
            <td>
                <div class="editor-label">
                    @Html.LabelFor(model => model.TicketDescription)
                </div>
            </td>
            <td>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.TicketDescription)
                    @Html.ValidationMessageFor(model => model.TicketDescription)
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Abandoned, "是否坏账")
                </div>
            </td>
            <td>
                <div class="editor-field">
                    @Html.EditorFor(m => m.Abandoned)
                    @Html.ValidationMessageFor(model => model.Abandoned)
                </div>
            </td>
            <td>
                <div class="editor-label">
                    @Html.LabelFor(model => model.AbandonReason, "坏账原因")
                </div>
            </td>
            <td>
                <div class="editor-field">
                    @Html.TextAreaFor(m => m.AbandonReason)
                    @Html.ValidationMessageFor(model => model.AbandonReason)
                </div>
                <div class="editor-field">
                    @Html.HiddenFor(m => m.IsConfirm)
                </div>
                @Html.Hidden("ProjectID", (int)ViewBag.ProjectID)
            </td>
        </tr>
    </table>
    @(Html.Telerik().Grid<AjaxParticipant>().Name("pList").BindTo(ViewData["pList"] as IEnumerable<AjaxParticipant>)
            .DataKeys(keys =>
            {
                keys.Add(s => s.ID);
            })
            .ToolBar(commands =>
            {
                commands.Insert();
                commands.SubmitChanges();
            })
            .Columns(c => 
            { 
                c.Bound(p => p.Name).Title("客户名称");
                c.Bound(p => p.Title).Title("客户职位");
                c.Bound(p => p.Gender).Title("客户性别");
                c.Bound(p => p.Mobile).Title("移动电话");
                c.Bound(p => p.Contact).Title("客户直线");
                c.Bound(p => p.Email).Title("电子邮箱");
                c.Bound(p => p.ParticipantTypeID).Title("参会类型");
                c.Command(commands => commands.Delete()).Title("删除");
            })
            .DataBinding(dataBinding =>
            {
                dataBinding.Ajax()
                    .Select("_SelectAjaxParticipant", "SalesEx")
                    .Update("_UpdateAjaxParticipant", "SalesEx");
            })
            .Editable(editing => editing.Mode(GridEditMode.InCell).DefaultDataItem(new AjaxParticipant{}))
            .ClientEvents(events => events.OnEdit("onEdit"))
    ) 

</fieldset>

    <script type="text/javascript">
        function onEdit(e) {
            $(e.form).find('#Gender').data('tDropDownList').select(function (dataItem) {
                return dataItem.Text == e.dataItem['Gender'];
            });

            $(e.form).find('#ParticipantTypeID').data('tDropDownList').select(function (dataItem) {
                return dataItem.Text == e.dataItem['ParticipantTypeID'].Text;
            });
        }
    </script>

