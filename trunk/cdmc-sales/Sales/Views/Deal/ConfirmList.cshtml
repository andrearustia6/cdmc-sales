@using Entity
@{
    if (Utl.Employee.CurrentRole.Level == 4)
    {
        ViewBag.Title = "出单到账确认";
    }
    else
    {
        ViewBag.Title = "会务出单确认";
    }
}
@{
    if (Utl.Employee.CurrentRole.Level == 4)
    {
    <text>
    @Html.Partial("contenttitle", "财务到账确认")
    </text>
    }
    else if (Utl.Employee.CurrentRole.Level == 3)
    {
    <text> @Html.Partial("contenttitle", "会务出单确认")</text>
    }
    else
    {
    <text> @Html.Partial("contenttitle", "板块出单确认")</text>
    }
}
<div id="filter-container" style="height: 30px;">
    <span>
        <label style="margin: 7px; float: left;">
            年份:</label>
        @Html.DropDownList("Year", Utl.SelectHelper.YearSelectList(),"请选择", new { style = "margin:5px;float: left;" })
    </span>
    <span>
        <label style="margin: 7px; float: left;">
            月份:</label>
        @Html.DropDownList("Month", Utl.SelectHelper.MonthSelectList(),"请选择", new { style = "margin:5px;float: left;" })
    </span>
    <span>
        <label style="margin: 7px; float: left;">
            出单筛选:</label>
        @Html.DropDownList("Filters", Utl.SelectHelper.FilterSelectList(), new { style = "margin:5px;float: left;" })
    </span>
    <span>
        <label style="margin: 7px; float: left;">
            项目:</label>
        @Html.DropDownList("Projects", Utl.SelectHelper.ProjectSelectList(Utl.Employee.CurrentUserName, (int?)ViewBag.selectVal), "全部项目", new { style = "margin:5px;float: left;" })
    </span><span>
        <label style="margin: 7px; float: left;">
            公司名/出单号:</label>
        @Html.TextBox("CompanyDealCodes", string.Empty, new { style = "margin:5px;float: left; width: 80px;" })
    </span><span>
        <label style="margin: 7px; float: left;">
            应付款金额:</label>
        @Html.DropDownList("Payments", Utl.SelectHelper.DealPaymentSelectList(), new { style = "margin:5px;float: left;" })
    </span><span>
        <label style="margin: 7px; float: left;">
            是否有参会人:</label>
        @Html.DropDownList("Participants", Utl.SelectHelper.DealParticipantSelectList(), new { style = "margin:5px;float: left;" })
    </span><span>
        <button type="submit" onclick="filterChange()" style="margin: 2px 2px 2px 15px; float: left;">
            筛选</button>
    </span>
</div>
@(Html.Telerik().Grid<Model.AjaxViewDeal>().Name("Grid")
.DataKeys(keys => { keys.Add(s => s.ID); })
.Columns(c =>
{
    //c.Bound(item => item.ID);//客户公司
    c.Bound(item => item.CompanyName);//客户公司
    c.Bound(item => item.ProjectCode);//项目编号
    c.Bound(item => item.DealCode);//出单号
    c.Bound(item => item.PackageName);//Package中文名
    c.Bound(item => item.Committer);//客户签单人
    c.Bound(item => item.Sales);//权益描述
    c.Bound(item => item.Role);//权益描述
    c.Bound(item => item.DispParticipantTypeName);//权益描述
    c.Bound(item => item.SignDate).Format("{0:d}");//签约日期
    c.Bound(item => item.ExpectedPaymentDate).Format("{0:d}");//合约付款日期
    //c.Bound(item => item.Payment).Format("{0:c}").Aggregate(a => a.Sum()).ClientFooterTemplate("<#= $.telerik.formatString('{0:c}', Sum) #>");//应付款
    c.Bound(item => item.RMBPayment).Title("RMB应付款").Width(100).Format("{0:￥#,##0}").Aggregate(aggregates => aggregates.Sum()).ClientFooterTemplate("<p>RMB应付款: ￥<#= $.telerik.formatString('{0:n0}', Sum) #></p>").ClientGroupFooterTemplate("<p>RMB应付款: ￥<#= $.telerik.formatString('{0:n0}', Sum) #></p>");
    c.Bound(item => item.USDPayment).Title("USD应付款").Width(100).Format("{0:$#,##0}").Aggregate(aggregates => aggregates.Sum()).ClientFooterTemplate("<p>USD应付款: $<#= $.telerik.formatString('{0:n0}', Sum) #></p>").ClientGroupFooterTemplate("<p>USD应付款: $<#= $.telerik.formatString('{0:n0}', Sum) #></p>");
    c.Bound(item => item.ActualPaymentDate).Format("{0:d}");//实际付款日期
    c.Bound(item => item.Income).Format("{0:c0}");//实际入账
    c.Bound(item => item.ModifiedDate);
    c.Bound(item => item.TicketDescription).Width(200);

    //c.Bound(item => item.IsClosed).Width(70);
    //c.Bound(item => item.CommitterContect).Width(100);
    //c.Bound(item => item.Abandoned).Width(70);
    //c.Bound(item => item.IsConfirm).Width(100);

    if (Utl.Employee.CurrentRole.Level == 4)//财务
    {
        c.Bound(item => item.ID).Title("出单到账操作").ClientTemplate("<span><button name='confirm' onclick='onConfirm(<#= ID #>)'>确认</button></span>");
    }
    else//会务
    {
        c.Bound(item => item.ID).Title("出单确认操作").ClientTemplate("<span><button name='confirm' onclick='onConfirm(<#= ID #>)'>确认</button></span>");
        //c.Command(commands =>
        //{
        //    commands.Edit().ButtonType(GridButtonType.Image);
        //}).Title("确认");
    }
    c.Bound(item => item.IsConfirm).Hidden(true);

})
    .ClientEvents(events => events.OnDataBinding("dataBinding").OnRowDataBound("onRowDataBound").OnComplete("onComplete"))
.DataBinding(dataBinding =>
{
    dataBinding.Ajax()
        .Select("_SelectIndex", "Deal")
        .Update("_SaveAjaxEditing", "Deal");
})
.Editable(editing => editing.Mode(GridEditMode.PopUp))
.Resizable(resizing => resizing.Columns(true)).Filterable().Sortable().Groupable()
.Pageable(p => p.Style(GridPagerStyles.Status).PageSize(50)
.PageOnScroll(true)).Scrollable(s => s.Height(350)).Sortable().Filterable().Groupable()
)
@{if (Utl.Employee.CurrentRole.Level == 4)
  {
    @(Html.Telerik().Window().Title("财务出单到账")
        .Name("confirmDeal")
    .Content(@<text><div class="dialogue-confirmDeal">
        <div class="confirmDeal-wrapper">
        </div>
        <div class="dialogue-buttons" style="float: right;">
            <input type="button" class="btn-queding" onclick="OkConfirm()" />
            <input type="button" class="btn-quxiao" onclick="CancelConfirm()" />
        </div>
    </div></text>)
    .Width(1000).Height(570).Draggable(true).Modal(true).Visible(false)
)
  }
  else if (Utl.Employee.CurrentRole.Level == 3)
  {
    @(Html.Telerik().Window().Title("会务出单确认")
        .Name("confirmDeal")
    .Content(@<text><div class="dialogue-quickdeal">
        <div class="confirmDeal-wrapper">
        </div>
        <div class="dialogue-buttons" style="float: right;">
            <input type="button" class="btn-queding" onclick="OkConfirm()" />
            <input type="button" class="btn-quxiao" onclick="CancelConfirm()" />
        </div>
    </div></text>)
          .Width(1000).Height(600).Draggable(true).Modal(true).Visible(false)
)
  }
  else
  {
    @(Html.Telerik().Window().Title("板块出单确认")
        .Name("confirmDeal")
    .Content(@<text><div class="dialogue-quickdeal">
        <div class="confirmDeal-wrapper">
        </div>
        <div class="dialogue-buttons" style="float: right;">
            <input type="button" class="btn-queding" onclick="OkConfirm()" />
            <input type="button" class="btn-quxiao" onclick="CancelConfirm()" />
        </div>
    </div></text>)
          .Width(1000).Height(600).Draggable(true).Modal(true).Visible(false)
)
  }
}
<script type="text/javascript">
    function onComplete(e) {
        if (e.name == "update") {
            $("#Grid").data("tGrid").rebind();
        }
    }
    function filterChange() {
        $("#Grid").data("tGrid").rebind();
    }
    function dataBinding(e) {
        var filter = $("#Filters").val();
        var project  = $("#Projects").val();
        var CompanyDealCode= $("#CompanyDealCodes").val();
      
        var Payment = $("#Payments").val();
        var Participant = $("#Participants").val();
        var year = $("#Year").val();
        var month = $("#Month").val();
        e.data = $.extend(e.data, { filterId: filter, projectId: project, CompanyDealCodeLike: CompanyDealCode,  PaymentID: Payment, ParticipantsID: Participant,year:year,month:month });
    }

    function onRowDataBound(e) {
        @{
            if (Utl.Employee.CurrentRole.Level == 4)
            { }
            else if (Utl.Employee.CurrentRole.Level == 3)
            {
                <text>
                if ((e.dataItem.IsConfirm == "是")) {
                    //$(e.row).find("button[name='confirm']").remove(); //remove Edit button
                    $(e.row).find("button[name='confirm']").text('编辑');
                }
                </text>
            }
            else
            {
             <text>
             $(e.row).find("button[name='confirm']").text('编辑');
             </text>
            }
        }
    }

    function onConfirm(dealID) {
        $.post('PostID', { id: dealID }, function (result) {
            $('.confirmDeal-wrapper').html(result);
            var window = $('#confirmDeal').data('tWindow');
            window.center().open();
        });
    }

    function CancelConfirm() {
        var window = $('#confirmDeal').data('tWindow');
        window.close();
    }

    function OkConfirm() {
        if ($('.confirmDeal-wrapper form').valid()) {
            if ($("#Abandoned").attr("checked") == "checked" && $("#AbandonReason").val() == "") {
                alert('确认为坏账时，必须填写坏账原因！');
                return;
            }
            var query = $('.confirmDeal-wrapper form').serializeArray();
            $.post('SaveAjaxConfirm', query, function (result) {
                $('#confirmDeal').data('tWindow').close();
                $("#Grid").data("tGrid").rebind();
            });
        }
    }
</script>
