@using Sales.Model
@using Entity
@model List<_PreCommission>
@{
    ViewBag.Title = "Index";
}
<script>
    var TargetNameEN = "";
    var ProjectName = "";
    var ProjectID = "";
    var StartDate = "";
    var EndDate = "";
    var InOut = "";
</script>
<fieldset>
    <legend>月份</legend>
    @{
        using (Html.BeginForm())
        {
            var m = ViewBag.Month as int?;
            m = m == null ? DateTime.Now.AddMonths(-1).Month : m;
        @Html.DropDownList("month", new SelectList(new List<int>() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }, m), new { onchange = "setexport('0');this.form.submit();" })
            @Html.Hidden("btnExport");
        <button value="export" id="export" type="button" name="Export" onclick="setexport('1');this.form.submit();"
            style="margin-left: 20px">
            导出</button>
            

        }
    }
</fieldset>
@{
    var month = ViewBag.Month as int?;
    var query = ViewBag.fuzzyInput as string;
    var rolelvl = ViewBag.RoleLevel as int?;
}
@{ 
    
    <fieldset>
        <legend>销售提成预发表</legend>
        @(Html.Telerik().Grid<_PreCommission>(Model).Name("PreCommission")
            .ToolBar(commands => commands.Insert().ImageHtmlAttributes(new { style = "margin-left:0" }))
            .DataKeys(keys =>
            {
                keys.Add(o => o.ID);
            })
            .DataBinding(dataBinding =>
            {
                dataBinding.Ajax().Select("PrecommissionIndex", "Finance", new { month = month })
                    .Update("Save", "Finance")
                    .Insert("Insert", "Finance")
                    .Delete("Delete","Finance");
            })
        .Columns(columns =>
        {
            columns.Bound(p => p.CommID).Width(70).HtmlAttributes(new { style = "text-align:left" });
            columns.Bound(p => p.InOut).Width(40).HtmlAttributes(new { style = "text-align:left" });
            columns.Bound(p => p.TargetNameEN).Width(50).HtmlAttributes(new { style = "text-align:left" });
            columns.Bound(p => p.TargetNameCN).Width(50).HtmlAttributes(new { style = "text-align:left" });
            columns.Bound(p => p.StartDate).Width(60).HtmlAttributes(new { style = "text-align:left" }).Format("{0:d}");
            columns.Bound(p => p.EndDate).Width(60).HtmlAttributes(new { style = "text-align:left" }).Format("{0:d}");
            columns.Bound(p => p.ProjectName).Width(50).HtmlAttributes(new { style = "text-align:right" });
            columns.Bound(p => p.Income).Width(80).HtmlAttributes(new { style = "text-align:right" }).Format("{0:c}");
            columns.Bound(p => p.Commission).Width(50).HtmlAttributes(new { style = "text-align:right" }).Format("{0:c}");
            columns.Bound(p => p.Tax).Width(50).HtmlAttributes(new { style = "text-align:right" }).Format("{0:c}");
            columns.Bound(p => p.Bonus).Width(50).HtmlAttributes(new { style = "text-align:right" }).Format("{0:c}");
            columns.Bound(p => p.TotalCommission).Width(60).HtmlAttributes(new { style = "text-align:right" }).Format("{0:c}");
            columns.Bound(p => p.ReturnIncome).Width(60).HtmlAttributes(new { style = "text-align:right" }).Format("{0:c}");
            columns.Bound(p => p.ActualCommission).Width(60).HtmlAttributes(new { style = "text-align:right" }).Format("{0:c}");
            columns.Command(commands =>
            {
                commands.Edit().ButtonType(GridButtonType.Text);
                commands.Delete().ButtonType(GridButtonType.Text);
            }).Title("编辑").Width(100);
        })
         .Editable(editing => editing.Mode(GridEditMode.PopUp).TemplateName("PreCommissionEdit"))
                 .ClientEvents(events => events.OnEdit("ChangePopup"))
                                 .ClientEvents(events => events.OnCommand("SetParams").OnComplete("onComplete"))
                  .Pageable(p => p.Style(GridPagerStyles.Status).PageOnScroll(true)
               .PageSize(25)).Scrollable(scrolling => scrolling.Height(350)).Sortable().Resizable(r => r.Columns(true))
                           )
    </fieldset>
  
}
<script>
    function onComplete(e) {
        if (e.name == "delete") {
            $("#PreCommission").data("tGrid").rebind();
        }
    }
    function ChangePopup(e) {
        var popup = $("#" + e.currentTarget.id + "PopUp");
        var popupDataWin = popup.data("tWindow");
        var l = ($(window).width() / 2 - $(popup).width() / 2);
        popup.css({ "left": l + "px", "margin-left": "0", "width": $(popup).width() });

    }
    function SetParams(e) {
        if (e.name == "edit") {
            TargetNameEN = e.dataItem.TargetNameEN;
            ProjectName = e.dataItem.ProjectName;
            ProjectID = e.dataItem.ProjectID;
            StartDate = e.dataItem.StartDate;
            EndDate = e.dataItem.EndDate;
            InOut = e.dataItem.InOut;
        }
        else if (e.name == "add") {
            TargetNameEN = "";
            ProjectName = "";
            ProjectID = "";
            StartDate = "";
            EndDate = "";
            InOut = "";
        }
    }
    function setexport(code) {
        $("#btnExport").val(code);
    }
</script>